const ERROR = 2;
const OFF = 0;

module.exports = {
  parserOptions: {
    tsconfigRootDir: __dirname,
    project: ['./tsconfig.json'],
    ecmaVersion: 6,
    jsxPragma: null,
  },
  reportUnusedDisableDirectives: true,
  settings: {
    'import/parsers': { '@typescript-eslint/parser': ['.ts'] },
    'import/resolver': { node: { extensions: ['.ts', '.js', '.json'] }, typescript: {} },
  },
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:@typescript-eslint/recommended-requiring-type-checking',
    'plugin:@typescript-eslint/strict',
    'plugin:import/errors',
    'plugin:unicorn/recommended',
    'plugin:prettier/recommended',
    'plugin:eslint-plugin/all',
  ],
  rules: {
    'array-callback-return': ERROR,
    'arrow-body-style': ERROR,
    'consistent-return': [ERROR, { treatUndefinedAsUnspecified: true }],
    curly: ERROR,
    'default-case': ERROR,
    eqeqeq: ERROR,
    'guard-for-in': ERROR,
    'lines-between-class-members': ERROR,
    'max-lines': ERROR,
    'no-bitwise': ERROR,
    'no-caller': ERROR,
    'no-console': ERROR,
    'no-constant-binary-expression': ERROR,
    'no-constructor-return': ERROR,
    'no-else-return': ERROR,
    'no-eval': ERROR,
    'no-extend-native': ERROR,
    'no-extra-bind': ERROR,
    'no-floating-decimal': ERROR,
    'no-implicit-coercion': [ERROR, { allow: ['!!'] }],
    'no-invalid-this': ERROR,
    'no-iterator': ERROR,
    'no-lone-blocks': ERROR,
    'no-lonely-if': ERROR,
    'no-loop-func': ERROR,
    'no-multi-assign': ERROR,
    'no-nested-ternary': ERROR,
    'no-new': ERROR,
    'no-new-func': ERROR,
    'no-new-wrappers': ERROR,
    'no-param-reassign': ERROR,
    'no-path-concat': ERROR,
    'no-plusplus': [ERROR, { allowForLoopAfterthoughts: true }],
    'no-process-exit': ERROR,
    'no-proto': ERROR,
    'no-return-assign': ERROR,
    'no-script-url': ERROR,
    'no-self-compare': ERROR,
    'no-shadow': ERROR,
    'no-template-curly-in-string': ERROR,
    'no-undef-init': ERROR,
    'no-underscore-dangle': [ERROR, { allowAfterThis: true, allowAfterSuper: true }],
    'no-unmodified-loop-condition': ERROR,
    'no-unneeded-ternary': [ERROR, { defaultAssignment: false }],
    'no-useless-call': ERROR,
    'no-useless-computed-key': ERROR,
    'no-useless-concat': ERROR,
    'no-useless-return': ERROR,
    'no-void': ERROR,
    'object-shorthand': ERROR,
    'one-var': [ERROR, 'never'],
    'operator-assignment': ERROR,
    'padding-line-between-statements': [
      ERROR,
      // Always require blank lines after directive (like 'use-strict'), except between directives
      { blankLine: 'always', prev: 'directive', next: '*' },
      { blankLine: 'any', prev: 'directive', next: 'directive' },
      // Always require blank lines after import, except between imports
      { blankLine: 'always', prev: 'import', next: '*' },
      { blankLine: 'any', prev: 'import', next: 'import' },
      // Always require blank lines before and after every sequence of variable declarations and export
      { blankLine: 'always', prev: '*', next: ['const', 'let', 'var', 'export'] },
      { blankLine: 'always', prev: ['const', 'let', 'var', 'export'], next: '*' },
      { blankLine: 'any', prev: ['const', 'let', 'var', 'export'], next: ['const', 'let', 'var', 'export'] },
      // Always require blank lines before and after class declaration, if, do/while, switch, try
      { blankLine: 'always', prev: '*', next: ['if', 'class', 'for', 'do', 'while', 'switch', 'try'] },
      { blankLine: 'always', prev: ['if', 'class', 'for', 'do', 'while', 'switch', 'try'], next: '*' },
      // Always require blank lines before return statements
      { blankLine: 'always', prev: '*', next: 'return' },
    ],
    'prefer-destructuring': ERROR,
    'prefer-exponentiation-operator': ERROR,
    'prefer-numeric-literals': ERROR,
    'prefer-promise-reject-errors': ERROR,
    'prefer-regex-literals': ERROR,
    'prefer-template': ERROR,
    'quote-props': [ERROR, 'as-needed'],
    radix: ERROR,
    'spaced-comment': ERROR,
    'sort-imports': [ERROR, { ignoreDeclarationSort: true }],
    strict: ERROR,
    yoda: ERROR,

    '@typescript-eslint/array-type': ERROR,
    '@typescript-eslint/consistent-indexed-object-style': ERROR,
    '@typescript-eslint/consistent-type-definitions': ERROR,
    '@typescript-eslint/consistent-type-imports': ERROR,
    '@typescript-eslint/class-literal-property-style': ERROR,
    '@typescript-eslint/default-param-last': ERROR,
    '@typescript-eslint/explicit-function-return-type': [ERROR, { allowExpressions: true }],
    '@typescript-eslint/explicit-member-accessibility': [ERROR, { accessibility: 'no-public' }],
    '@typescript-eslint/explicit-module-boundary-types': ERROR,
    '@typescript-eslint/method-signature-style': ERROR,
    '@typescript-eslint/no-duplicate-enum-values': ERROR,
    '@typescript-eslint/no-empty-interface': [ERROR, { allowSingleExtends: true }],
    '@typescript-eslint/no-extraneous-class': ERROR,
    '@typescript-eslint/no-invalid-void-type': ERROR,
    '@typescript-eslint/no-non-null-asserted-nullish-coalescing': ERROR,
    '@typescript-eslint/no-unused-expressions': [ERROR, { allowTernary: true }],
    '@typescript-eslint/no-unused-vars': [ERROR, { ignoreRestSiblings: true }],
    '@typescript-eslint/no-use-before-define': ERROR,
    '@typescript-eslint/no-useless-constructor': ERROR,
    '@typescript-eslint/no-useless-empty-export': ERROR,
    '@typescript-eslint/parameter-properties': ERROR,
    '@typescript-eslint/prefer-for-of': ERROR,
    '@typescript-eslint/prefer-function-type': ERROR,
    '@typescript-eslint/prefer-optional-chain': ERROR,
    '@typescript-eslint/prefer-ts-expect-error': ERROR,
    '@typescript-eslint/sort-type-union-intersection-members': ERROR,
    '@typescript-eslint/unified-signatures': ERROR,

    '@typescript-eslint/consistent-type-exports': ERROR,
    '@typescript-eslint/dot-notation': ERROR,
    '@typescript-eslint/naming-convention': [
      ERROR,
      {
        selector: 'property',
        format: ['camelCase', 'UPPER_CASE', 'PascalCase'],
        leadingUnderscore: 'allow',
        filter: { regex: '^process\\.env\\.[A-Z][A-Z_]*$', match: false },
      },
      { selector: 'variable', format: ['camelCase', 'UPPER_CASE', 'PascalCase'], leadingUnderscore: 'allow' },
      { selector: 'typeLike', format: ['PascalCase'] },
      { selector: 'typeAlias', format: ['PascalCase'], custom: { regex: '^I[A-Z]', match: false } },
      { selector: 'interface', format: ['PascalCase'], prefix: ['I'] },
    ],
    '@typescript-eslint/no-base-to-string': ERROR,
    '@typescript-eslint/no-confusing-void-expression': ERROR,
    '@typescript-eslint/no-meaningless-void-operator': ERROR,
    '@typescript-eslint/no-redundant-type-constituents': ERROR,
    '@typescript-eslint/no-throw-literal': ERROR,
    '@typescript-eslint/no-unnecessary-boolean-literal-compare': ERROR,
    '@typescript-eslint/no-unnecessary-type-arguments': ERROR,
    '@typescript-eslint/non-nullable-type-assertion-style': OFF,
    '@typescript-eslint/prefer-nullish-coalescing': ERROR,
    '@typescript-eslint/prefer-readonly': ERROR,
    '@typescript-eslint/prefer-reduce-type-parameter': ERROR,
    '@typescript-eslint/prefer-regexp-exec': ERROR,
    '@typescript-eslint/prefer-return-this-type': ERROR,
    '@typescript-eslint/require-array-sort-compare': ERROR,
    '@typescript-eslint/return-await': ERROR,
    '@typescript-eslint/switch-exhaustiveness-check': ERROR,

    'eslint-plugin/require-meta-docs-url': OFF,

    'import/extensions': [ERROR, { json: 'always' }],
    'import/first': ERROR,
    'import/newline-after-import': ERROR,
    'import/no-cycle': ERROR,
    'import/no-default-export': ERROR,
    'import/no-duplicates': ERROR,
    'import/no-extraneous-dependencies': ERROR,
    'import/no-useless-path-segments': ERROR,
    'import/order': [
      ERROR,
      { alphabetize: { order: 'asc' }, 'newlines-between': 'always', warnOnUnassignedImports: true },
    ],

    'unicorn/import-index': ERROR,
    'unicorn/no-array-for-each': OFF,
    'unicorn/no-array-reduce': OFF,
    'unicorn/no-null': OFF,
    'unicorn/prefer-module': OFF,
    'unicorn/prefer-node-protocol': OFF,
    'unicorn/prevent-abbreviations': OFF,
  },
  overrides: [
    { files: ['./.commitlintrc.js', './.eslintrc.js', './.prettierrc.js'], rules: { 'no-undef': OFF } },
    {
      files: ['./.eslintrc.js', './src/index.ts', './src/configs/*.ts'],
      rules: { '@typescript-eslint/naming-convention': OFF },
    },
    { files: ['./src/index.ts', './src/configs/*.ts', './src/rules/*.ts'], rules: { 'import/no-default-export': OFF } },
    { files: ['./scripts/*.ts', './tests/**/*.ts'], rules: { 'no-console': OFF } },
    { files: ['./src/index.ts'], rules: { 'max-lines': OFF } },
  ],
};
